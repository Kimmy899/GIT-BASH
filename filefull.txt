Git
Pwd - местонахождение нашей папки
Cd../../../ - выход на несколько папок выше
Cd .. - уровень выше
Mkdir - создание папки
Ls -la - что создали в этой папке ( git status )
Touch - создание файла
cat назв файла - читаем
cat > назв файла - создание нового файла
cat >> назв файла - редактирование файла, чтобы выйти из редим редакт ждем ctrl c
ls -la назв папки - узнаем , что хранится в папке
clear - очищение всего
ls -a - покажет скрытые файлы
ls - нескрытые файлы
ls -A - тоже скрытые, но без родительской директории
Cd ( название папки) - заходим внутрь папки
history - история всех команд
^ - поочередность уже выполненных команд, обратная стрелка аналогично показывает
rmkdir назв папки - удалится папка


Vim название файла - создали и зашли автоматом в редактор
В vim жмем i - режим редактирования 
Esc - выход
:qw - выход полностью

mr - перемещение папки в другую | название папки | назыание папку куда перемещать
cp - копирование откуда/куда
cat назв папки - покажет , что нах внутри
rm текстовый файл - удаление текстового файла
rm -r назв папки - удаление папки
rmkdir назв папки/файла - через него можно удалить тоже
grep qwerty q11.txt - мы ищем qwerty  и где q11.txt
grep -c  назв файла - кол-во строк
Grep -ic назв файла - колво строк с регистрозавис

1.Git clone ссылка, копируем внешний репозиторий на локальный
2.Vim file.txt
3.git add . ( или имя файла, замест точки )
4.git commit -m “create имя файла» or git commit -am “add имя файла» во втором если исправляли уже залитый файл
5.git push

Если нужно выровнять репозитории:
1.git fetch
2.git pull
3.git fetch

Find . -name q11.txt - мы ищем q11.txt. А точка после find  указывает на то, что именно в этой директории производится обыск 
find . -name *.png - мы можем найти файлы с разн расширением, тут тщем с .png
fing . name “*png” -delete -print - удаляем все файлы с png

echo привет
echo привет > назв папки/файла - выведет в текстовый редактор и доб инфу
echo здравствуй > назв папки/файла - заменет привет на здравствуй
Echo здравствуй >> назв папки/файлс - добавит здравствуй , не заменяя привет
cat file5.txt file6.txt > file7.txt - мы перемещаем с 5,6 файлом всю инфу, что записывали через echo в 7

Cat qa.txt | grep Test - мы изем в qa.txt слово Test , но grep регистрозависим. Если нужно без регистрзавис то:
cat qa.txt | grep -i Test
ls | grep qa - нам покажет сколько в qa создано директорий 

ps - увидим все процессы написанные в нашей консоле
ps x - и не только в консоле
ps u - детальная инфа пользователя
Ps au
Ps aux - узнаем все процессы (Русов 5)
kill 52 - стирает все процессы в консоле с идентификатором 52 
. ping google.com - прописать наш сервер . Тут идет справка пакетов. Смотрим сколько потеряно. Время остановить можно ctrl c
Это помогает в тестирование транспортных протоколов TCP/ ip и модели osi
. ping -c 3 google.com - отправляем только три пакеты и смотрим
. ping -c 3 -i 3 google.com - когда хотим каждые три секунды отправку пакета
curl ya.ru
curl -L ya.ru - приходит html, но лучше в devtools смотреть 

Через ping можно проверить приходят/ отправляются ли пакеты , к примеру если сайт начал жестко тупить
curl - осуществляет обращение нашего сайта 
Через curl можно отправить параметры get 
curl ссылка http... - в этом ответе будет снизу вопрос какую стр хотели бы увидеть 
Через curl можно и запрос отправить в postman ( Русов bush6 )


git clone ссылка - мы копируем внешний репозиторий на локальный
 1. Vim назв файла с расширением - создаем файл, автоматом зашли в него написали что-то на языке расширение ( типо json, txt, xml)
 2. git add назв файла или git add . - 1. Доб файл, 2 доб все созданные файлы
 3. Git commit -m “create назв файла» или git commit -a (-am) «modify назв файла» - это мы в первом случае закомители новый добавленный файл, во втором мы закоммители измененный файл
 4. Git push - перенесли все закомиченное на внешний репозиторий
 5. Если кто-то сделал изменения на внешнем репозитории , мы проверяем в git через команду git fetch - если пишет хоть что-то значит есть изменения.
 6. Чтобы выравнять внешний и локальный репозиторий, делаем: 1.

 git fetch 2. gir push 3. git fetch - не должна быть никакая показанная инфа, значит все ок, выравняли. Если выдает ошибку пишем коммнаду git pull

git branch - показывает на какой ветке мы
git branch назв ветки - создаем новую ветку
git checkout назв ветки - переход на другую ветку
Редактируем файлы через vim
git commit -m “add state” - вроде показывает все что ищменчли и добавляли
